{"meta":{"title":"Jerry的小筆記","subtitle":"歡迎光臨","description":"記錄生活/工作..","author":"Jerry Lai","url":"http://example.com","root":"/"},"pages":[{"title":"關於我","date":"2021-12-24T10:34:49.000Z","updated":"2021-12-29T03:41:54.034Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"施工中"},{"title":"All tags","date":"2021-12-24T10:37:31.000Z","updated":"2021-12-24T10:38:05.281Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-12-29T08:03:12.000Z","updated":"2021-12-29T08:03:39.499Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"blockchain","slug":"blockchain","date":"2021-12-30T08:47:29.000Z","updated":"2021-12-30T08:50:28.057Z","comments":true,"path":"2021/12/30/blockchain/","link":"","permalink":"http://example.com/2021/12/30/blockchain/","excerpt":"","text":"最近在學習web3.js與solidity，也認識了很好用的solidity開發IDE - Remix，順便筆記一下","categories":[{"name":"筆記","slug":"筆記","permalink":"http://example.com/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://example.com/tags/blockchain/"},{"name":"tutorial","slug":"tutorial","permalink":"http://example.com/tags/tutorial/"}]},{"title":"Mocha - 單元測試框架","slug":"mocha","date":"2021-12-29T07:07:57.000Z","updated":"2021-12-29T09:53:03.917Z","comments":true,"path":"2021/12/29/mocha/","link":"","permalink":"http://example.com/2021/12/29/mocha/","excerpt":"工作有遇到開發API的需求，在規格文件都開好的情況下，想要驗證自己寫的API有沒有問題？是否都有依照規格文件的設定開發完成？ 這概念就是BDD(Behavior-Driven Development)行為驅動開發。 剛好有這個機會，所以來記錄一下使用Mocha的過程","text":"工作有遇到開發API的需求，在規格文件都開好的情況下，想要驗證自己寫的API有沒有問題？是否都有依照規格文件的設定開發完成？ 這概念就是BDD(Behavior-Driven Development)行為驅動開發。 剛好有這個機會，所以來記錄一下使用Mocha的過程 什麼是MochaMocha 是一個 JavaScript 測試框架，是相當熱門的單元測試框架，目的就是用來管理測試的程式碼。 Quick Start安裝透過terminal安裝mocha和斷言庫，Javascript提供了許多斷言庫，用來幫助我們判斷單元測試中是否結果符合我們預期，這次我們選擇使用chai斷言庫。 註: 斷言(assertion)，是一種放在程式中的一階邏輯（如一個結果為真或是假的邏輯判斷式） 1npm install mocha chai 安裝後，我們多安裝mochawesome，之後可以產生美觀的報表 1npm install --save-dev mochawesome 使用說明在專案根目錄創建test資料夾 1mkdir test 建立index.js並引入mocha套件，這裡多加了一些邏輯，主要用於建立多個測試檔案，以便以後可以擴充 123456789101112131415const path = require(&#x27;path&#x27;);const Mocha = require(&#x27;mocha&#x27;);//此段告訴mocha要使用mochawesome產生測試報告const mocha = new Mocha(&#123; reporter: &#x27;mochawesome&#x27;,&#125;);(async() =&gt; &#123; const tests = [&#x27;./project1/test.js&#x27;]; // 放專案測試檔案所在路徑 const directoryPath = __dirname; const testPaths = tests.map(t =&gt; path.join(directoryPath, t)); testPaths.forEach(path =&gt; mocha.addFile(path)); mocha.run(); //每個都會執行&#125;)(); 在專案內的test.js檔案中(./project1/test.js)，引入chai和其內的expect斷言方式，並加入mocha的語法邏輯，最後在test資料夾目錄下輸入指令node ./index.js，測試程式就會運作囉。 語法範例如下: 1234567891011const chai = require(&#x27;chai&#x27;);const &#123; expect &#125; = chai;describe(&quot;ExpectTest&quot;, ()=&gt;&#123; it(&#x27;5 + 5 is expected to be 10&#x27;, function() &#123; const variable1 = 5; const variable2 = 5; const sum = variable1 + variable2; expect(sum).to.equal(10); &#125;);&#125;); 語法介紹 Mocha describe(): 用於標明測試的功能 it(): 撰寫測試案例 before(): 在整個測試開始前執行的函式 after(): 在整個測試結束後執行的函式 beforeEach()：在每個 Test Case 開始前執行的函式。 afterEach()：在每個 Test Case 結束後執行的函式。 範例: 1234567891011121314151617181920212223describe(&#x27;hooks&#x27;, function() &#123; // 測試區塊 before(function() &#123; // 在所有測試開始前會執行的程式碼區塊 &#125;); after(function() &#123; // 在所有測試結束後會執行的程式碼區塊 &#125;); beforeEach(function() &#123; // 在每個 Test Case 開始前執行的程式碼區塊 &#125;); afterEach(function() &#123; // 在每個 Test Case 結束後執行的程式碼區塊 &#125;); // 撰寫個別 Test Case it(&#x27;should ...&#x27;, function() &#123; // 執行 Test Case &#125;);&#125;); Chai.js 列出比較常用的，其餘請參考Chai.js官方網站文檔 .to .be .been .is .that .which .and .has .have .with .at .of .same .not .any .all .a(type) / .an(type)","categories":[{"name":"筆記","slug":"筆記","permalink":"http://example.com/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"test-framework","slug":"test-framework","permalink":"http://example.com/tags/test-framework/"},{"name":"mocha","slug":"mocha","permalink":"http://example.com/tags/mocha/"},{"name":"unit-test","slug":"unit-test","permalink":"http://example.com/tags/unit-test/"}]},{"title":"使用Hexo架設blog","slug":"hexo-tutorial","date":"2021-12-24T10:36:31.000Z","updated":"2021-12-29T08:35:17.762Z","comments":true,"path":"2021/12/24/hexo-tutorial/","link":"","permalink":"http://example.com/2021/12/24/hexo-tutorial/","excerpt":"最近覺得雖然Google大神很好用，但還是需要自己動手紀錄一下自己做過的事情，不僅會更有印象，未來遇到相同問題的時候也能很快速地翻找自己紀錄的筆記解決問題。 想到曾經主管和我推薦過Hexo，所以今天就來動手架設自己的Blog。","text":"最近覺得雖然Google大神很好用，但還是需要自己動手紀錄一下自己做過的事情，不僅會更有印象，未來遇到相同問題的時候也能很快速地翻找自己紀錄的筆記解決問題。 想到曾經主管和我推薦過Hexo，所以今天就來動手架設自己的Blog。 什麼是HexoHexo 是強大且快速就能架設的網誌Blog框架。它使用Node.js並可以將MarkDown轉譯成HTML文件再透過各種漂亮的主題快速產生靜態檔案。 下面就來介紹如何使用它吧！ Quick Start安裝Hexo (需先安裝Node.js)輸入以下指令，完成後輸入 hexo v 可以查看是否安裝完成 1npm install -g hexo-cli 註: Mac 使用者 在編譯時可能會碰到問題，請至 App Store安裝Xcode，安裝完成後，開啟並前往Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。 初始專案輸入指令 hexo init 你的資料夾名稱，即可建置存放部落格的目錄，舉例來說你可以輸入 1hexo init myBlog 接著進入你創建的資料夾目錄底下，並輸入 npm install 安裝Hexo所需的套件，安裝完成後，輸入指令hexo s，接著在瀏覽器輸入http://localhost:4000 有出現畫面就成功啦！ 資料結構初始化Hexo後，資料夾的目錄結構如下： 12345678910.├── _config.yml # 最主要的設定檔├── package.json # 相依套件列表├── scaffolds # 用來建立新的 post├── public # 處理編譯過 md 檔案會放到這裡├── source # 部落格的內容，除了 _posts 外，其他以 _ 開頭的檔案都會被忽略| ├── _drafts| └── _posts└── themes # 網頁主題 └── 主題資料夾 主題設定大概熟悉目錄結構以後，我們來介紹如何變更主題，推薦網路很熱門的NexT主題 NexT從上方網站中git安裝或網站下載解壓縮後，把文件放到目錄結構的themes主題，接著修改網站設定_config.yml，把theme 主題名稱改成你的主題資料夾名稱重新啟動server hexo s 後就可以看到主題改變囉！ 文章佈局 預設佈局 layout 鷹架 Scaffold : 可依照文章需要的格式去新增文章， post : 文章 page : 頁面 draft : 草稿 新增草稿 輸入指令建立新草稿在 source / _drafts / 資料夾內 1hexo new draft 文章名稱 草稿轉文章 輸入執行 layout 是要移動到的佈局、title 是要移動的檔名 1hexo publish [layout] &lt;title&gt; 新增文章 輸入指令後會建立在 source / _posts / 資料夾內 1hexo new 文章名稱 參考指令123456789101112# hexo new &lt;scaffold_layout&gt; &lt;title&gt; # 建立新文章# hexo publish &lt;title&gt; hexo new draft hello_world hexo generate # 產生靜態檔案 hexo generate -d # 產生靜態檔案，並部署網站 hexo server # 啟動伺服器 hexo deploy # 部署網站 hexo deploy -g # 部署網站前先產生靜態檔案 hexo clean # 清除快取檔案 hexo list &lt;type&gt; # 列出網站相關資料 hexo version # 列出 hexo 版本","categories":[{"name":"筆記","slug":"筆記","permalink":"http://example.com/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"筆記","slug":"筆記","permalink":"http://example.com/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://example.com/tags/blockchain/"},{"name":"tutorial","slug":"tutorial","permalink":"http://example.com/tags/tutorial/"},{"name":"test-framework","slug":"test-framework","permalink":"http://example.com/tags/test-framework/"},{"name":"mocha","slug":"mocha","permalink":"http://example.com/tags/mocha/"},{"name":"unit-test","slug":"unit-test","permalink":"http://example.com/tags/unit-test/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}